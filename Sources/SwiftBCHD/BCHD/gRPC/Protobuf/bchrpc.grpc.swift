//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bchrpc.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// bchrpc contains a set of RPCs that can be exposed publicly via
/// the command line options. This service could be authenticated or
/// unauthenticated.
///
/// Usage: instantiate `Pb_bchrpcClient`, then call methods of this protocol to make API calls.
internal protocol Pb_bchrpcClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Pb_bchrpcClientInterceptorFactoryProtocol? { get }

  func getMempoolInfo(
    _ request: Pb_GetMempoolInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pb_GetMempoolInfoRequest, Pb_GetMempoolInfoResponse>

  func getMempool(
    _ request: Pb_GetMempoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pb_GetMempoolRequest, Pb_GetMempoolResponse>

  func getBlockchainInfo(
    _ request: Pb_GetBlockchainInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pb_GetBlockchainInfoRequest, Pb_GetBlockchainInfoResponse>

  func getBlockInfo(
    _ request: Pb_GetBlockInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pb_GetBlockInfoRequest, Pb_GetBlockInfoResponse>

  func getBlock(
    _ request: Pb_GetBlockRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pb_GetBlockRequest, Pb_GetBlockResponse>

  func getRawBlock(
    _ request: Pb_GetRawBlockRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pb_GetRawBlockRequest, Pb_GetRawBlockResponse>

  func getBlockFilter(
    _ request: Pb_GetBlockFilterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pb_GetBlockFilterRequest, Pb_GetBlockFilterResponse>

  func getHeaders(
    _ request: Pb_GetHeadersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pb_GetHeadersRequest, Pb_GetHeadersResponse>

  func getTransaction(
    _ request: Pb_GetTransactionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pb_GetTransactionRequest, Pb_GetTransactionResponse>

  func getRawTransaction(
    _ request: Pb_GetRawTransactionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pb_GetRawTransactionRequest, Pb_GetRawTransactionResponse>

  func getAddressTransactions(
    _ request: Pb_GetAddressTransactionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pb_GetAddressTransactionsRequest, Pb_GetAddressTransactionsResponse>

  func getRawAddressTransactions(
    _ request: Pb_GetRawAddressTransactionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pb_GetRawAddressTransactionsRequest, Pb_GetRawAddressTransactionsResponse>

  func getAddressUnspentOutputs(
    _ request: Pb_GetAddressUnspentOutputsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pb_GetAddressUnspentOutputsRequest, Pb_GetAddressUnspentOutputsResponse>

  func getUnspentOutput(
    _ request: Pb_GetUnspentOutputRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pb_GetUnspentOutputRequest, Pb_GetUnspentOutputResponse>

  func getMerkleProof(
    _ request: Pb_GetMerkleProofRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pb_GetMerkleProofRequest, Pb_GetMerkleProofResponse>

  func getSlpTokenMetadata(
    _ request: Pb_GetSlpTokenMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pb_GetSlpTokenMetadataRequest, Pb_GetSlpTokenMetadataResponse>

  func getSlpParsedScript(
    _ request: Pb_GetSlpParsedScriptRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pb_GetSlpParsedScriptRequest, Pb_GetSlpParsedScriptResponse>

  func getSlpTrustedValidation(
    _ request: Pb_GetSlpTrustedValidationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pb_GetSlpTrustedValidationRequest, Pb_GetSlpTrustedValidationResponse>

  func getSlpGraphSearch(
    _ request: Pb_GetSlpGraphSearchRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pb_GetSlpGraphSearchRequest, Pb_GetSlpGraphSearchResponse>

  func checkSlpTransaction(
    _ request: Pb_CheckSlpTransactionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pb_CheckSlpTransactionRequest, Pb_CheckSlpTransactionResponse>

  func submitTransaction(
    _ request: Pb_SubmitTransactionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pb_SubmitTransactionRequest, Pb_SubmitTransactionResponse>

  func subscribeTransactions(
    _ request: Pb_SubscribeTransactionsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Pb_TransactionNotification) -> Void
  ) -> ServerStreamingCall<Pb_SubscribeTransactionsRequest, Pb_TransactionNotification>

  func subscribeTransactionStream(
    callOptions: CallOptions?,
    handler: @escaping (Pb_TransactionNotification) -> Void
  ) -> BidirectionalStreamingCall<Pb_SubscribeTransactionsRequest, Pb_TransactionNotification>

  func subscribeBlocks(
    _ request: Pb_SubscribeBlocksRequest,
    callOptions: CallOptions?,
    handler: @escaping (Pb_BlockNotification) -> Void
  ) -> ServerStreamingCall<Pb_SubscribeBlocksRequest, Pb_BlockNotification>
}

extension Pb_bchrpcClientProtocol {
  internal var serviceName: String {
    return "pb.bchrpc"
  }

  /// GetMempoolInfo returns the state of the current mempool.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMempoolInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMempoolInfo(
    _ request: Pb_GetMempoolInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pb_GetMempoolInfoRequest, Pb_GetMempoolInfoResponse> {
    return self.makeUnaryCall(
      path: "/pb.bchrpc/GetMempoolInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMempoolInfoInterceptors() ?? []
    )
  }

  /// GetMempool returns information about all transactions currently in the memory pool.
  /// Offers an option to return full transactions or just transactions hashes.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMempool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMempool(
    _ request: Pb_GetMempoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pb_GetMempoolRequest, Pb_GetMempoolResponse> {
    return self.makeUnaryCall(
      path: "/pb.bchrpc/GetMempool",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMempoolInterceptors() ?? []
    )
  }

  /// GetBlockchainInfo returns data about the blockchain including the most recent
  /// block hash and height.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockchainInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlockchainInfo(
    _ request: Pb_GetBlockchainInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pb_GetBlockchainInfoRequest, Pb_GetBlockchainInfoResponse> {
    return self.makeUnaryCall(
      path: "/pb.bchrpc/GetBlockchainInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockchainInfoInterceptors() ?? []
    )
  }

  /// GetBlockInfo returns metadata and info for a specified block.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlockInfo(
    _ request: Pb_GetBlockInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pb_GetBlockInfoRequest, Pb_GetBlockInfoResponse> {
    return self.makeUnaryCall(
      path: "/pb.bchrpc/GetBlockInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockInfoInterceptors() ?? []
    )
  }

  /// GetBlock returns detailed data for a block.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlock.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlock(
    _ request: Pb_GetBlockRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pb_GetBlockRequest, Pb_GetBlockResponse> {
    return self.makeUnaryCall(
      path: "/pb.bchrpc/GetBlock",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockInterceptors() ?? []
    )
  }

  /// GetRawBlock returns a block in a serialized format.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetRawBlock.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getRawBlock(
    _ request: Pb_GetRawBlockRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pb_GetRawBlockRequest, Pb_GetRawBlockResponse> {
    return self.makeUnaryCall(
      path: "/pb.bchrpc/GetRawBlock",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRawBlockInterceptors() ?? []
    )
  }

  /// GetBlockFilter returns the compact filter (cf) of a block as a Golomb-Rice encoded set.
  ///
  /// **Requires CfIndex**
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockFilter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlockFilter(
    _ request: Pb_GetBlockFilterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pb_GetBlockFilterRequest, Pb_GetBlockFilterResponse> {
    return self.makeUnaryCall(
      path: "/pb.bchrpc/GetBlockFilter",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockFilterInterceptors() ?? []
    )
  }

  /// GetHeaders takes a block locator object and returns a batch of no more than 2000
  /// headers. Upon parsing the block locator, if the server concludes there has been a
  /// fork, it will send headers starting at the fork point, or genesis if no blocks in
  /// the locator are in the best chain. If the locator is already at the tip no headers
  /// will be returned.
  /// see: bchd/bchrpc/documentation/wallet_operation.md
  ///
  /// - Parameters:
  ///   - request: Request to send to GetHeaders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getHeaders(
    _ request: Pb_GetHeadersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pb_GetHeadersRequest, Pb_GetHeadersResponse> {
    return self.makeUnaryCall(
      path: "/pb.bchrpc/GetHeaders",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetHeadersInterceptors() ?? []
    )
  }

  /// GetTransaction returns a transaction given a transaction hash.
  ///
  /// **Requires TxIndex**
  /// **Requires SlpIndex for slp related information **
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTransaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTransaction(
    _ request: Pb_GetTransactionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pb_GetTransactionRequest, Pb_GetTransactionResponse> {
    return self.makeUnaryCall(
      path: "/pb.bchrpc/GetTransaction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTransactionInterceptors() ?? []
    )
  }

  /// GetRawTransaction returns a serialized transaction given a transaction hash.
  ///
  /// **Requires TxIndex**
  ///
  /// - Parameters:
  ///   - request: Request to send to GetRawTransaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getRawTransaction(
    _ request: Pb_GetRawTransactionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pb_GetRawTransactionRequest, Pb_GetRawTransactionResponse> {
    return self.makeUnaryCall(
      path: "/pb.bchrpc/GetRawTransaction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRawTransactionInterceptors() ?? []
    )
  }

  /// GetAddressTransactions returns the transactions for the given address. Offers offset,
  /// limit, and from block options.
  ///
  /// **Requires AddressIndex**
  /// **Requires SlpIndex for slp related information **
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAddressTransactions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAddressTransactions(
    _ request: Pb_GetAddressTransactionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pb_GetAddressTransactionsRequest, Pb_GetAddressTransactionsResponse> {
    return self.makeUnaryCall(
      path: "/pb.bchrpc/GetAddressTransactions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAddressTransactionsInterceptors() ?? []
    )
  }

  /// GetRawAddressTransactions returns the serialized raw transactions for
  /// the given address. Offers offset, limit, and from block options.
  ///
  /// **Requires AddressIndex**
  ///
  /// - Parameters:
  ///   - request: Request to send to GetRawAddressTransactions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getRawAddressTransactions(
    _ request: Pb_GetRawAddressTransactionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pb_GetRawAddressTransactionsRequest, Pb_GetRawAddressTransactionsResponse> {
    return self.makeUnaryCall(
      path: "/pb.bchrpc/GetRawAddressTransactions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRawAddressTransactionsInterceptors() ?? []
    )
  }

  /// GetAddressUnspentOutputs returns all the unspent transaction outputs
  /// for the given address.
  ///
  /// **Requires AddressIndex**
  /// **Requires SlpIndex for slp related information **
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAddressUnspentOutputs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAddressUnspentOutputs(
    _ request: Pb_GetAddressUnspentOutputsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pb_GetAddressUnspentOutputsRequest, Pb_GetAddressUnspentOutputsResponse> {
    return self.makeUnaryCall(
      path: "/pb.bchrpc/GetAddressUnspentOutputs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAddressUnspentOutputsInterceptors() ?? []
    )
  }

  /// GetUnspentOutput takes an unspent output in the utxo set and returns
  /// the utxo metadata or not found.
  ///
  /// **Requires SlpIndex for slp related information **
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUnspentOutput.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getUnspentOutput(
    _ request: Pb_GetUnspentOutputRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pb_GetUnspentOutputRequest, Pb_GetUnspentOutputResponse> {
    return self.makeUnaryCall(
      path: "/pb.bchrpc/GetUnspentOutput",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUnspentOutputInterceptors() ?? []
    )
  }

  /// GetMerkleProof returns a Merkle (SPV) proof for a specific transaction
  /// in the provided block.
  ///
  /// **Requires TxIndex**
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMerkleProof.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMerkleProof(
    _ request: Pb_GetMerkleProofRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pb_GetMerkleProofRequest, Pb_GetMerkleProofResponse> {
    return self.makeUnaryCall(
      path: "/pb.bchrpc/GetMerkleProof",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMerkleProofInterceptors() ?? []
    )
  }

  /// GetSlpTokenMetadata return slp token metadata for one or more tokens.
  ///
  /// **Requires SlpIndex**
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSlpTokenMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSlpTokenMetadata(
    _ request: Pb_GetSlpTokenMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pb_GetSlpTokenMetadataRequest, Pb_GetSlpTokenMetadataResponse> {
    return self.makeUnaryCall(
      path: "/pb.bchrpc/GetSlpTokenMetadata",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSlpTokenMetadataInterceptors() ?? []
    )
  }

  /// GetSlpParsedScript returns marshalled object from parsing an slp pubKeyScript
  /// using goslp package.  This endpoint does not require SlpIndex.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSlpParsedScript.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSlpParsedScript(
    _ request: Pb_GetSlpParsedScriptRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pb_GetSlpParsedScriptRequest, Pb_GetSlpParsedScriptResponse> {
    return self.makeUnaryCall(
      path: "/pb.bchrpc/GetSlpParsedScript",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSlpParsedScriptInterceptors() ?? []
    )
  }

  /// GetSlpTrustedValidation returns slp validity related information for one or more transactions.
  ///
  /// **Requires SlpIndex**
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSlpTrustedValidation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSlpTrustedValidation(
    _ request: Pb_GetSlpTrustedValidationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pb_GetSlpTrustedValidationRequest, Pb_GetSlpTrustedValidationResponse> {
    return self.makeUnaryCall(
      path: "/pb.bchrpc/GetSlpTrustedValidation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSlpTrustedValidationInterceptors() ?? []
    )
  }

  /// GraphSearch returns all the transactions needed for a client to validate an SLP graph
  ///
  /// **Requires SlpIndex and SlpGraphSearch**
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSlpGraphSearch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSlpGraphSearch(
    _ request: Pb_GetSlpGraphSearchRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pb_GetSlpGraphSearchRequest, Pb_GetSlpGraphSearchResponse> {
    return self.makeUnaryCall(
      path: "/pb.bchrpc/GetSlpGraphSearch",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSlpGraphSearchInterceptors() ?? []
    )
  }

  /// CheckSlpTransaction checks the validity of a supposed slp transaction before it is broadcasted.
  ///
  /// - Parameters:
  ///   - request: Request to send to CheckSlpTransaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func checkSlpTransaction(
    _ request: Pb_CheckSlpTransactionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pb_CheckSlpTransactionRequest, Pb_CheckSlpTransactionResponse> {
    return self.makeUnaryCall(
      path: "/pb.bchrpc/CheckSlpTransaction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCheckSlpTransactionInterceptors() ?? []
    )
  }

  /// Submit a transaction to all connected peers.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubmitTransaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func submitTransaction(
    _ request: Pb_SubmitTransactionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pb_SubmitTransactionRequest, Pb_SubmitTransactionResponse> {
    return self.makeUnaryCall(
      path: "/pb.bchrpc/SubmitTransaction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitTransactionInterceptors() ?? []
    )
  }

  /// SubscribeTransactions creates subscription to all relevant transactions based on
  /// the subscription filter.
  ///
  /// This RPC does not use bidirectional streams and therefore can be used
  /// with grpc-web. You will need to close and reopen the stream whenever
  /// you want to update the subscription filter. If you are not using grpc-web
  /// then SubscribeTransactionStream is more appropriate.
  ///
  /// **Requires TxIndex to receive input metadata**
  /// **Requires SlpIndex to receive slp input/output metadata, or SlpTokenMetadata**
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeTransactions.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeTransactions(
    _ request: Pb_SubscribeTransactionsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Pb_TransactionNotification) -> Void
  ) -> ServerStreamingCall<Pb_SubscribeTransactionsRequest, Pb_TransactionNotification> {
    return self.makeServerStreamingCall(
      path: "/pb.bchrpc/SubscribeTransactions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeTransactionsInterceptors() ?? [],
      handler: handler
    )
  }

  /// SubscribeTransactionStream subscribes to relevant transactions based on
  /// the subscription requests. The parameters to filter transactions on can
  /// be updated by sending new SubscribeTransactionsRequest objects on the stream.
  ///
  /// NOTE: Because this RPC is using bi-directional streaming it cannot be used with
  /// grpc-web.
  ///
  /// **Requires TxIndex to receive input metadata**
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func subscribeTransactionStream(
    callOptions: CallOptions? = nil,
    handler: @escaping (Pb_TransactionNotification) -> Void
  ) -> BidirectionalStreamingCall<Pb_SubscribeTransactionsRequest, Pb_TransactionNotification> {
    return self.makeBidirectionalStreamingCall(
      path: "/pb.bchrpc/SubscribeTransactionStream",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeTransactionStreamInterceptors() ?? [],
      handler: handler
    )
  }

  /// SubscribeBlocks creates a subscription for notifications of new blocks being
  /// connected to the blockchain or blocks being disconnected.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeBlocks.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeBlocks(
    _ request: Pb_SubscribeBlocksRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Pb_BlockNotification) -> Void
  ) -> ServerStreamingCall<Pb_SubscribeBlocksRequest, Pb_BlockNotification> {
    return self.makeServerStreamingCall(
      path: "/pb.bchrpc/SubscribeBlocks",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeBlocksInterceptors() ?? [],
      handler: handler
    )
  }
}

internal protocol Pb_bchrpcClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getMempoolInfo'.
  func makeGetMempoolInfoInterceptors() -> [ClientInterceptor<Pb_GetMempoolInfoRequest, Pb_GetMempoolInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'getMempool'.
  func makeGetMempoolInterceptors() -> [ClientInterceptor<Pb_GetMempoolRequest, Pb_GetMempoolResponse>]

  /// - Returns: Interceptors to use when invoking 'getBlockchainInfo'.
  func makeGetBlockchainInfoInterceptors() -> [ClientInterceptor<Pb_GetBlockchainInfoRequest, Pb_GetBlockchainInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'getBlockInfo'.
  func makeGetBlockInfoInterceptors() -> [ClientInterceptor<Pb_GetBlockInfoRequest, Pb_GetBlockInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'getBlock'.
  func makeGetBlockInterceptors() -> [ClientInterceptor<Pb_GetBlockRequest, Pb_GetBlockResponse>]

  /// - Returns: Interceptors to use when invoking 'getRawBlock'.
  func makeGetRawBlockInterceptors() -> [ClientInterceptor<Pb_GetRawBlockRequest, Pb_GetRawBlockResponse>]

  /// - Returns: Interceptors to use when invoking 'getBlockFilter'.
  func makeGetBlockFilterInterceptors() -> [ClientInterceptor<Pb_GetBlockFilterRequest, Pb_GetBlockFilterResponse>]

  /// - Returns: Interceptors to use when invoking 'getHeaders'.
  func makeGetHeadersInterceptors() -> [ClientInterceptor<Pb_GetHeadersRequest, Pb_GetHeadersResponse>]

  /// - Returns: Interceptors to use when invoking 'getTransaction'.
  func makeGetTransactionInterceptors() -> [ClientInterceptor<Pb_GetTransactionRequest, Pb_GetTransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'getRawTransaction'.
  func makeGetRawTransactionInterceptors() -> [ClientInterceptor<Pb_GetRawTransactionRequest, Pb_GetRawTransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'getAddressTransactions'.
  func makeGetAddressTransactionsInterceptors() -> [ClientInterceptor<Pb_GetAddressTransactionsRequest, Pb_GetAddressTransactionsResponse>]

  /// - Returns: Interceptors to use when invoking 'getRawAddressTransactions'.
  func makeGetRawAddressTransactionsInterceptors() -> [ClientInterceptor<Pb_GetRawAddressTransactionsRequest, Pb_GetRawAddressTransactionsResponse>]

  /// - Returns: Interceptors to use when invoking 'getAddressUnspentOutputs'.
  func makeGetAddressUnspentOutputsInterceptors() -> [ClientInterceptor<Pb_GetAddressUnspentOutputsRequest, Pb_GetAddressUnspentOutputsResponse>]

  /// - Returns: Interceptors to use when invoking 'getUnspentOutput'.
  func makeGetUnspentOutputInterceptors() -> [ClientInterceptor<Pb_GetUnspentOutputRequest, Pb_GetUnspentOutputResponse>]

  /// - Returns: Interceptors to use when invoking 'getMerkleProof'.
  func makeGetMerkleProofInterceptors() -> [ClientInterceptor<Pb_GetMerkleProofRequest, Pb_GetMerkleProofResponse>]

  /// - Returns: Interceptors to use when invoking 'getSlpTokenMetadata'.
  func makeGetSlpTokenMetadataInterceptors() -> [ClientInterceptor<Pb_GetSlpTokenMetadataRequest, Pb_GetSlpTokenMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'getSlpParsedScript'.
  func makeGetSlpParsedScriptInterceptors() -> [ClientInterceptor<Pb_GetSlpParsedScriptRequest, Pb_GetSlpParsedScriptResponse>]

  /// - Returns: Interceptors to use when invoking 'getSlpTrustedValidation'.
  func makeGetSlpTrustedValidationInterceptors() -> [ClientInterceptor<Pb_GetSlpTrustedValidationRequest, Pb_GetSlpTrustedValidationResponse>]

  /// - Returns: Interceptors to use when invoking 'getSlpGraphSearch'.
  func makeGetSlpGraphSearchInterceptors() -> [ClientInterceptor<Pb_GetSlpGraphSearchRequest, Pb_GetSlpGraphSearchResponse>]

  /// - Returns: Interceptors to use when invoking 'checkSlpTransaction'.
  func makeCheckSlpTransactionInterceptors() -> [ClientInterceptor<Pb_CheckSlpTransactionRequest, Pb_CheckSlpTransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'submitTransaction'.
  func makeSubmitTransactionInterceptors() -> [ClientInterceptor<Pb_SubmitTransactionRequest, Pb_SubmitTransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeTransactions'.
  func makeSubscribeTransactionsInterceptors() -> [ClientInterceptor<Pb_SubscribeTransactionsRequest, Pb_TransactionNotification>]

  /// - Returns: Interceptors to use when invoking 'subscribeTransactionStream'.
  func makeSubscribeTransactionStreamInterceptors() -> [ClientInterceptor<Pb_SubscribeTransactionsRequest, Pb_TransactionNotification>]

  /// - Returns: Interceptors to use when invoking 'subscribeBlocks'.
  func makeSubscribeBlocksInterceptors() -> [ClientInterceptor<Pb_SubscribeBlocksRequest, Pb_BlockNotification>]
}

internal final class Pb_bchrpcClient: Pb_bchrpcClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Pb_bchrpcClientInterceptorFactoryProtocol?

  /// Creates a client for the pb.bchrpc service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Pb_bchrpcClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// bchrpc contains a set of RPCs that can be exposed publicly via
/// the command line options. This service could be authenticated or
/// unauthenticated.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Pb_bchrpcProvider: CallHandlerProvider {
  var interceptors: Pb_bchrpcServerInterceptorFactoryProtocol? { get }

  /// GetMempoolInfo returns the state of the current mempool.
  func getMempoolInfo(request: Pb_GetMempoolInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pb_GetMempoolInfoResponse>

  /// GetMempool returns information about all transactions currently in the memory pool.
  /// Offers an option to return full transactions or just transactions hashes.
  func getMempool(request: Pb_GetMempoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pb_GetMempoolResponse>

  /// GetBlockchainInfo returns data about the blockchain including the most recent
  /// block hash and height.
  func getBlockchainInfo(request: Pb_GetBlockchainInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pb_GetBlockchainInfoResponse>

  /// GetBlockInfo returns metadata and info for a specified block.
  func getBlockInfo(request: Pb_GetBlockInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pb_GetBlockInfoResponse>

  /// GetBlock returns detailed data for a block.
  func getBlock(request: Pb_GetBlockRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pb_GetBlockResponse>

  /// GetRawBlock returns a block in a serialized format.
  func getRawBlock(request: Pb_GetRawBlockRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pb_GetRawBlockResponse>

  /// GetBlockFilter returns the compact filter (cf) of a block as a Golomb-Rice encoded set.
  ///
  /// **Requires CfIndex**
  func getBlockFilter(request: Pb_GetBlockFilterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pb_GetBlockFilterResponse>

  /// GetHeaders takes a block locator object and returns a batch of no more than 2000
  /// headers. Upon parsing the block locator, if the server concludes there has been a
  /// fork, it will send headers starting at the fork point, or genesis if no blocks in
  /// the locator are in the best chain. If the locator is already at the tip no headers
  /// will be returned.
  /// see: bchd/bchrpc/documentation/wallet_operation.md
  func getHeaders(request: Pb_GetHeadersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pb_GetHeadersResponse>

  /// GetTransaction returns a transaction given a transaction hash.
  ///
  /// **Requires TxIndex**
  /// **Requires SlpIndex for slp related information **
  func getTransaction(request: Pb_GetTransactionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pb_GetTransactionResponse>

  /// GetRawTransaction returns a serialized transaction given a transaction hash.
  ///
  /// **Requires TxIndex**
  func getRawTransaction(request: Pb_GetRawTransactionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pb_GetRawTransactionResponse>

  /// GetAddressTransactions returns the transactions for the given address. Offers offset,
  /// limit, and from block options.
  ///
  /// **Requires AddressIndex**
  /// **Requires SlpIndex for slp related information **
  func getAddressTransactions(request: Pb_GetAddressTransactionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pb_GetAddressTransactionsResponse>

  /// GetRawAddressTransactions returns the serialized raw transactions for
  /// the given address. Offers offset, limit, and from block options.
  ///
  /// **Requires AddressIndex**
  func getRawAddressTransactions(request: Pb_GetRawAddressTransactionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pb_GetRawAddressTransactionsResponse>

  /// GetAddressUnspentOutputs returns all the unspent transaction outputs
  /// for the given address.
  ///
  /// **Requires AddressIndex**
  /// **Requires SlpIndex for slp related information **
  func getAddressUnspentOutputs(request: Pb_GetAddressUnspentOutputsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pb_GetAddressUnspentOutputsResponse>

  /// GetUnspentOutput takes an unspent output in the utxo set and returns
  /// the utxo metadata or not found.
  ///
  /// **Requires SlpIndex for slp related information **
  func getUnspentOutput(request: Pb_GetUnspentOutputRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pb_GetUnspentOutputResponse>

  /// GetMerkleProof returns a Merkle (SPV) proof for a specific transaction
  /// in the provided block.
  ///
  /// **Requires TxIndex**
  func getMerkleProof(request: Pb_GetMerkleProofRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pb_GetMerkleProofResponse>

  /// GetSlpTokenMetadata return slp token metadata for one or more tokens.
  ///
  /// **Requires SlpIndex**
  func getSlpTokenMetadata(request: Pb_GetSlpTokenMetadataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pb_GetSlpTokenMetadataResponse>

  /// GetSlpParsedScript returns marshalled object from parsing an slp pubKeyScript
  /// using goslp package.  This endpoint does not require SlpIndex.
  func getSlpParsedScript(request: Pb_GetSlpParsedScriptRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pb_GetSlpParsedScriptResponse>

  /// GetSlpTrustedValidation returns slp validity related information for one or more transactions.
  ///
  /// **Requires SlpIndex**
  func getSlpTrustedValidation(request: Pb_GetSlpTrustedValidationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pb_GetSlpTrustedValidationResponse>

  /// GraphSearch returns all the transactions needed for a client to validate an SLP graph
  ///
  /// **Requires SlpIndex and SlpGraphSearch**
  func getSlpGraphSearch(request: Pb_GetSlpGraphSearchRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pb_GetSlpGraphSearchResponse>

  /// CheckSlpTransaction checks the validity of a supposed slp transaction before it is broadcasted.
  func checkSlpTransaction(request: Pb_CheckSlpTransactionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pb_CheckSlpTransactionResponse>

  /// Submit a transaction to all connected peers.
  func submitTransaction(request: Pb_SubmitTransactionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pb_SubmitTransactionResponse>

  /// SubscribeTransactions creates subscription to all relevant transactions based on
  /// the subscription filter.
  ///
  /// This RPC does not use bidirectional streams and therefore can be used
  /// with grpc-web. You will need to close and reopen the stream whenever
  /// you want to update the subscription filter. If you are not using grpc-web
  /// then SubscribeTransactionStream is more appropriate.
  ///
  /// **Requires TxIndex to receive input metadata**
  /// **Requires SlpIndex to receive slp input/output metadata, or SlpTokenMetadata**
  func subscribeTransactions(request: Pb_SubscribeTransactionsRequest, context: StreamingResponseCallContext<Pb_TransactionNotification>) -> EventLoopFuture<GRPCStatus>

  /// SubscribeTransactionStream subscribes to relevant transactions based on
  /// the subscription requests. The parameters to filter transactions on can
  /// be updated by sending new SubscribeTransactionsRequest objects on the stream.
  ///
  /// NOTE: Because this RPC is using bi-directional streaming it cannot be used with
  /// grpc-web.
  ///
  /// **Requires TxIndex to receive input metadata**
  func subscribeTransactionStream(context: StreamingResponseCallContext<Pb_TransactionNotification>) -> EventLoopFuture<(StreamEvent<Pb_SubscribeTransactionsRequest>) -> Void>

  /// SubscribeBlocks creates a subscription for notifications of new blocks being
  /// connected to the blockchain or blocks being disconnected.
  func subscribeBlocks(request: Pb_SubscribeBlocksRequest, context: StreamingResponseCallContext<Pb_BlockNotification>) -> EventLoopFuture<GRPCStatus>
}

extension Pb_bchrpcProvider {
  internal var serviceName: Substring { return "pb.bchrpc" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetMempoolInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_GetMempoolInfoRequest>(),
        responseSerializer: ProtobufSerializer<Pb_GetMempoolInfoResponse>(),
        interceptors: self.interceptors?.makeGetMempoolInfoInterceptors() ?? [],
        userFunction: self.getMempoolInfo(request:context:)
      )

    case "GetMempool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_GetMempoolRequest>(),
        responseSerializer: ProtobufSerializer<Pb_GetMempoolResponse>(),
        interceptors: self.interceptors?.makeGetMempoolInterceptors() ?? [],
        userFunction: self.getMempool(request:context:)
      )

    case "GetBlockchainInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_GetBlockchainInfoRequest>(),
        responseSerializer: ProtobufSerializer<Pb_GetBlockchainInfoResponse>(),
        interceptors: self.interceptors?.makeGetBlockchainInfoInterceptors() ?? [],
        userFunction: self.getBlockchainInfo(request:context:)
      )

    case "GetBlockInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_GetBlockInfoRequest>(),
        responseSerializer: ProtobufSerializer<Pb_GetBlockInfoResponse>(),
        interceptors: self.interceptors?.makeGetBlockInfoInterceptors() ?? [],
        userFunction: self.getBlockInfo(request:context:)
      )

    case "GetBlock":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_GetBlockRequest>(),
        responseSerializer: ProtobufSerializer<Pb_GetBlockResponse>(),
        interceptors: self.interceptors?.makeGetBlockInterceptors() ?? [],
        userFunction: self.getBlock(request:context:)
      )

    case "GetRawBlock":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_GetRawBlockRequest>(),
        responseSerializer: ProtobufSerializer<Pb_GetRawBlockResponse>(),
        interceptors: self.interceptors?.makeGetRawBlockInterceptors() ?? [],
        userFunction: self.getRawBlock(request:context:)
      )

    case "GetBlockFilter":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_GetBlockFilterRequest>(),
        responseSerializer: ProtobufSerializer<Pb_GetBlockFilterResponse>(),
        interceptors: self.interceptors?.makeGetBlockFilterInterceptors() ?? [],
        userFunction: self.getBlockFilter(request:context:)
      )

    case "GetHeaders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_GetHeadersRequest>(),
        responseSerializer: ProtobufSerializer<Pb_GetHeadersResponse>(),
        interceptors: self.interceptors?.makeGetHeadersInterceptors() ?? [],
        userFunction: self.getHeaders(request:context:)
      )

    case "GetTransaction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_GetTransactionRequest>(),
        responseSerializer: ProtobufSerializer<Pb_GetTransactionResponse>(),
        interceptors: self.interceptors?.makeGetTransactionInterceptors() ?? [],
        userFunction: self.getTransaction(request:context:)
      )

    case "GetRawTransaction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_GetRawTransactionRequest>(),
        responseSerializer: ProtobufSerializer<Pb_GetRawTransactionResponse>(),
        interceptors: self.interceptors?.makeGetRawTransactionInterceptors() ?? [],
        userFunction: self.getRawTransaction(request:context:)
      )

    case "GetAddressTransactions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_GetAddressTransactionsRequest>(),
        responseSerializer: ProtobufSerializer<Pb_GetAddressTransactionsResponse>(),
        interceptors: self.interceptors?.makeGetAddressTransactionsInterceptors() ?? [],
        userFunction: self.getAddressTransactions(request:context:)
      )

    case "GetRawAddressTransactions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_GetRawAddressTransactionsRequest>(),
        responseSerializer: ProtobufSerializer<Pb_GetRawAddressTransactionsResponse>(),
        interceptors: self.interceptors?.makeGetRawAddressTransactionsInterceptors() ?? [],
        userFunction: self.getRawAddressTransactions(request:context:)
      )

    case "GetAddressUnspentOutputs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_GetAddressUnspentOutputsRequest>(),
        responseSerializer: ProtobufSerializer<Pb_GetAddressUnspentOutputsResponse>(),
        interceptors: self.interceptors?.makeGetAddressUnspentOutputsInterceptors() ?? [],
        userFunction: self.getAddressUnspentOutputs(request:context:)
      )

    case "GetUnspentOutput":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_GetUnspentOutputRequest>(),
        responseSerializer: ProtobufSerializer<Pb_GetUnspentOutputResponse>(),
        interceptors: self.interceptors?.makeGetUnspentOutputInterceptors() ?? [],
        userFunction: self.getUnspentOutput(request:context:)
      )

    case "GetMerkleProof":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_GetMerkleProofRequest>(),
        responseSerializer: ProtobufSerializer<Pb_GetMerkleProofResponse>(),
        interceptors: self.interceptors?.makeGetMerkleProofInterceptors() ?? [],
        userFunction: self.getMerkleProof(request:context:)
      )

    case "GetSlpTokenMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_GetSlpTokenMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Pb_GetSlpTokenMetadataResponse>(),
        interceptors: self.interceptors?.makeGetSlpTokenMetadataInterceptors() ?? [],
        userFunction: self.getSlpTokenMetadata(request:context:)
      )

    case "GetSlpParsedScript":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_GetSlpParsedScriptRequest>(),
        responseSerializer: ProtobufSerializer<Pb_GetSlpParsedScriptResponse>(),
        interceptors: self.interceptors?.makeGetSlpParsedScriptInterceptors() ?? [],
        userFunction: self.getSlpParsedScript(request:context:)
      )

    case "GetSlpTrustedValidation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_GetSlpTrustedValidationRequest>(),
        responseSerializer: ProtobufSerializer<Pb_GetSlpTrustedValidationResponse>(),
        interceptors: self.interceptors?.makeGetSlpTrustedValidationInterceptors() ?? [],
        userFunction: self.getSlpTrustedValidation(request:context:)
      )

    case "GetSlpGraphSearch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_GetSlpGraphSearchRequest>(),
        responseSerializer: ProtobufSerializer<Pb_GetSlpGraphSearchResponse>(),
        interceptors: self.interceptors?.makeGetSlpGraphSearchInterceptors() ?? [],
        userFunction: self.getSlpGraphSearch(request:context:)
      )

    case "CheckSlpTransaction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_CheckSlpTransactionRequest>(),
        responseSerializer: ProtobufSerializer<Pb_CheckSlpTransactionResponse>(),
        interceptors: self.interceptors?.makeCheckSlpTransactionInterceptors() ?? [],
        userFunction: self.checkSlpTransaction(request:context:)
      )

    case "SubmitTransaction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_SubmitTransactionRequest>(),
        responseSerializer: ProtobufSerializer<Pb_SubmitTransactionResponse>(),
        interceptors: self.interceptors?.makeSubmitTransactionInterceptors() ?? [],
        userFunction: self.submitTransaction(request:context:)
      )

    case "SubscribeTransactions":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_SubscribeTransactionsRequest>(),
        responseSerializer: ProtobufSerializer<Pb_TransactionNotification>(),
        interceptors: self.interceptors?.makeSubscribeTransactionsInterceptors() ?? [],
        userFunction: self.subscribeTransactions(request:context:)
      )

    case "SubscribeTransactionStream":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_SubscribeTransactionsRequest>(),
        responseSerializer: ProtobufSerializer<Pb_TransactionNotification>(),
        interceptors: self.interceptors?.makeSubscribeTransactionStreamInterceptors() ?? [],
        observerFactory: self.subscribeTransactionStream(context:)
      )

    case "SubscribeBlocks":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_SubscribeBlocksRequest>(),
        responseSerializer: ProtobufSerializer<Pb_BlockNotification>(),
        interceptors: self.interceptors?.makeSubscribeBlocksInterceptors() ?? [],
        userFunction: self.subscribeBlocks(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Pb_bchrpcServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getMempoolInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMempoolInfoInterceptors() -> [ServerInterceptor<Pb_GetMempoolInfoRequest, Pb_GetMempoolInfoResponse>]

  /// - Returns: Interceptors to use when handling 'getMempool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMempoolInterceptors() -> [ServerInterceptor<Pb_GetMempoolRequest, Pb_GetMempoolResponse>]

  /// - Returns: Interceptors to use when handling 'getBlockchainInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBlockchainInfoInterceptors() -> [ServerInterceptor<Pb_GetBlockchainInfoRequest, Pb_GetBlockchainInfoResponse>]

  /// - Returns: Interceptors to use when handling 'getBlockInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBlockInfoInterceptors() -> [ServerInterceptor<Pb_GetBlockInfoRequest, Pb_GetBlockInfoResponse>]

  /// - Returns: Interceptors to use when handling 'getBlock'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBlockInterceptors() -> [ServerInterceptor<Pb_GetBlockRequest, Pb_GetBlockResponse>]

  /// - Returns: Interceptors to use when handling 'getRawBlock'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetRawBlockInterceptors() -> [ServerInterceptor<Pb_GetRawBlockRequest, Pb_GetRawBlockResponse>]

  /// - Returns: Interceptors to use when handling 'getBlockFilter'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBlockFilterInterceptors() -> [ServerInterceptor<Pb_GetBlockFilterRequest, Pb_GetBlockFilterResponse>]

  /// - Returns: Interceptors to use when handling 'getHeaders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetHeadersInterceptors() -> [ServerInterceptor<Pb_GetHeadersRequest, Pb_GetHeadersResponse>]

  /// - Returns: Interceptors to use when handling 'getTransaction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTransactionInterceptors() -> [ServerInterceptor<Pb_GetTransactionRequest, Pb_GetTransactionResponse>]

  /// - Returns: Interceptors to use when handling 'getRawTransaction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetRawTransactionInterceptors() -> [ServerInterceptor<Pb_GetRawTransactionRequest, Pb_GetRawTransactionResponse>]

  /// - Returns: Interceptors to use when handling 'getAddressTransactions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAddressTransactionsInterceptors() -> [ServerInterceptor<Pb_GetAddressTransactionsRequest, Pb_GetAddressTransactionsResponse>]

  /// - Returns: Interceptors to use when handling 'getRawAddressTransactions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetRawAddressTransactionsInterceptors() -> [ServerInterceptor<Pb_GetRawAddressTransactionsRequest, Pb_GetRawAddressTransactionsResponse>]

  /// - Returns: Interceptors to use when handling 'getAddressUnspentOutputs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAddressUnspentOutputsInterceptors() -> [ServerInterceptor<Pb_GetAddressUnspentOutputsRequest, Pb_GetAddressUnspentOutputsResponse>]

  /// - Returns: Interceptors to use when handling 'getUnspentOutput'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetUnspentOutputInterceptors() -> [ServerInterceptor<Pb_GetUnspentOutputRequest, Pb_GetUnspentOutputResponse>]

  /// - Returns: Interceptors to use when handling 'getMerkleProof'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMerkleProofInterceptors() -> [ServerInterceptor<Pb_GetMerkleProofRequest, Pb_GetMerkleProofResponse>]

  /// - Returns: Interceptors to use when handling 'getSlpTokenMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSlpTokenMetadataInterceptors() -> [ServerInterceptor<Pb_GetSlpTokenMetadataRequest, Pb_GetSlpTokenMetadataResponse>]

  /// - Returns: Interceptors to use when handling 'getSlpParsedScript'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSlpParsedScriptInterceptors() -> [ServerInterceptor<Pb_GetSlpParsedScriptRequest, Pb_GetSlpParsedScriptResponse>]

  /// - Returns: Interceptors to use when handling 'getSlpTrustedValidation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSlpTrustedValidationInterceptors() -> [ServerInterceptor<Pb_GetSlpTrustedValidationRequest, Pb_GetSlpTrustedValidationResponse>]

  /// - Returns: Interceptors to use when handling 'getSlpGraphSearch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSlpGraphSearchInterceptors() -> [ServerInterceptor<Pb_GetSlpGraphSearchRequest, Pb_GetSlpGraphSearchResponse>]

  /// - Returns: Interceptors to use when handling 'checkSlpTransaction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCheckSlpTransactionInterceptors() -> [ServerInterceptor<Pb_CheckSlpTransactionRequest, Pb_CheckSlpTransactionResponse>]

  /// - Returns: Interceptors to use when handling 'submitTransaction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubmitTransactionInterceptors() -> [ServerInterceptor<Pb_SubmitTransactionRequest, Pb_SubmitTransactionResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeTransactions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeTransactionsInterceptors() -> [ServerInterceptor<Pb_SubscribeTransactionsRequest, Pb_TransactionNotification>]

  /// - Returns: Interceptors to use when handling 'subscribeTransactionStream'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeTransactionStreamInterceptors() -> [ServerInterceptor<Pb_SubscribeTransactionsRequest, Pb_TransactionNotification>]

  /// - Returns: Interceptors to use when handling 'subscribeBlocks'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeBlocksInterceptors() -> [ServerInterceptor<Pb_SubscribeBlocksRequest, Pb_BlockNotification>]
}
